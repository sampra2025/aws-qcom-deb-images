{{- $build_rb1 := "false" -}}
{{- if .u_boot_rb1 -}}
{{- $build_rb1 := "true" }}
{{- end -}}

architecture: arm64

actions:
  - action: download
    description: Download qcom-ptool
    url: https://github.com/qualcomm-linux/qcom-ptool/archive/refs/heads/main.tar.gz
    name: qcom-ptool
    filename: qcom-ptool.tar.gz
    unpack: true

{{- if .u_boot_rb1 }}
  # TODO: consider switching to https://releases.linaro.org/96boards/rb1/qualcomm/firmware/RB1_firmware_20231124-v4.zip instead
  - action: download
    description: Download RB1 rescue image
    url: https://releases.linaro.org/96boards/rb1/linaro/rescue/23.12/rb1-bootloader-emmc-linux-47528.zip
    name: qrb2210-rb1_rescue-image.zip
    filename: qrb2210-rb1_rescue-image.zip
{{- end }}

  - action: download
    description: Download QCM6490 boot binaries
    url: https://softwarecenter.qualcomm.com/download/software/chip/qualcomm_linux-spf-1-0/qualcomm-linux-spf-1-0_test_device_public/r1.0_00075.0/qcm6490-le-1-0/common/build/ufs/bin/QCM6490_bootbinaries.zip
    name: qcm6490_boot-binaries
    filename: qcm6490_boot-binaries.zip

  - action: download
    description: Download RB3 Gen2 Vision Kit CDT
    url: https://artifacts.codelinaro.org/artifactory/codelinaro-le/Qualcomm_Linux/QCS6490/cdt/rb3gen2-vision-kit.zip
    name: rb3gen2-vision-kit_cdt
    filename: rb3gen2-vision-kit_cdt.zip

  - action: run
    description: Generate flash directories for eMMC and UFS boards
    chroot: false
    command: |
      set -eux
      # work dir that will be thrown away
      mkdir -v build

      # path to unpacked qcom-ptool tarball
      QCOM_PTOOL="${ROOTDIR}/../qcom-ptool.tar.gz.d/qcom-ptool-main"

{{- if .u_boot_rb1 }}
      ### board: qrb2210-rb1
      # unpack rescue image
      unzip -j "${ROOTDIR}/../qrb2210-rb1_rescue-image.zip" \
          -d build/qrb2210-rb1_rescue-image
      # TODO: on RB1, we don't generate partition files with ptool since its
      # partitions.conf does not have entries for data files from the rescue
      # image, while the rescue image defines useful partitions such as the ESP
      flash_dir="${ARTIFACTDIR}/flash_rb1"
      rm -rf "${flash_dir}"
      mkdir -v "${flash_dir}"
      # copy rescue image files
      cp --preserve=mode,timestamps -v build/qrb2210-rb1_rescue-image/* \
          "${flash_dir}"
      # copy RB1 U-Boot binary to u-boot-abootimg.img
      cp --preserve=mode,timestamps -v "${ARTIFACTDIR}/{{- .u_boot_rb1 -}}" \
          "${flash_dir}/rb1-boot.img"

      # update flashing file for RB1 U-Boot; in the rescue image, this
      # partition is blanked with boot-erase.img
      sed -i '/label="boot_a"/s/filename="[^"]*"/filename="rb1-boot.img"/' "${flash_dir}"/rawprogram*.xml

      # update flashing files for ESP image; in the rescue image, this
      # partition is blanked with boot-erase.img
      sed -i '/label="esp"/s#filename="[^"]*"#filename="../disk-sdcard.img1"#' "${flash_dir}"/rawprogram*.xml

      # update flashing files for rootfs image;; in the rescue image, this
      # partition is not provisioned
      sed -i '/label="rootfs"/s#filename="[^"]*"#filename="../disk-sdcard.img2"#' "${flash_dir}"/rawprogram*.xml

      # TODO: there is currently no dtb.bin alike system with the RB1 firmware

      # TODO: currently not providing CDT; it's present in
      # RB1_firmware_20231124-v4.zip but not in
      # rb1-bootloader-emmc-linux-47528.zip
{{- end }}

      ## platform: QCM6490
      # unpack boot binaries
      unzip -j "${ROOTDIR}/../qcm6490_boot-binaries.zip" \
          -d build/qcm6490_boot-binaries
      # generate partition files
      mkdir -v build/qcm6490_partitions
      (
          cd build/qcm6490_partitions
          conf="${QCOM_PTOOL}/platforms/qcm6490/partitions.conf"
          "${QCOM_PTOOL}/gen_partition.py" -i "$conf" \
              -o ptool-partitions.xml
          # partitions.conf sets --type=emmc, nand or ufs
          if grep -F '^--disk --type=ufs ' "${conf}"; then
              touch flash-ufs
          elif grep -F '^--disk --type=emmc ' "${conf}"; then
              touch flash-emmc
          fi
          "${QCOM_PTOOL}/ptool.py" -x ptool-partitions.xml
      )

      ### board: RB3Gen2 Vision Kit
      flash_dir="${ARTIFACTDIR}/flash_rb3gen2-vision-kit"
      rm -rf "${flash_dir}"
      mkdir -v "${flash_dir}"
      # copy platform partition files
      cp --preserve=mode,timestamps -v build/qcm6490_partitions/* \
          "${flash_dir}"
      # remove BLANK_GPT and WIPE_PARTITIONS files as it's common for people
      # to run "qdl rawprogram*.xml", mistakingly including these; perhaps
      # ptool should have a flag not to generate these; note that there are
      # wipe_rawprogram*.xml files still
      rm -v "${flash_dir}"/rawprogram*_BLANK_GPT.xml
      rm -v "${flash_dir}"/rawprogram*_WIPE_PARTITIONS.xml
      # copy platform boot binaries; these shouldn't ship partition files, but
      # make sure not to accidentally clobber any such file
      find build/qcm6490_boot-binaries \
          -not -name 'gpt_*' \
          -not -name 'patch*.xml' \
          -not -name 'rawprogram*.xml' \
          -not -name 'wipe*.xml' \
          -not -name 'zeros_*' \
          \( \
              -name Qualcomm-Technologies-Inc.-Proprietary \
              -or -name 'prog_*' \
              -or -name '*.bin' \
              -or -name '*.elf' \
              -or -name '*.fv' \
              -or -name '*.mbn' \
          \) \
          -exec cp --preserve=mode,timestamps -v '{}' "${flash_dir}" \;
      # unpack board CDT
      unzip -j "${ROOTDIR}/../rb3gen2-vision-kit_cdt.zip" \
          -d build/rb3gen2-vision-kit_cdt
      # copy just the CDT data; no partition or flashing files
      cp --preserve=mode,timestamps -v build/rb3gen2-vision-kit_cdt/cdt_vision_kit.bin \
          "${flash_dir}"

      # update flashing files for CDT
      sed -i '/label="cdt"/s/filename=""/filename="cdt_vision_kit.bin"/' \
          "${flash_dir}"/rawprogram*.xml

      # generate a dtb.bin FAT partition with just a single dtb for the current
      # board; long-term this should really be a set of dtbs and overlays as to
      # share dtb.bin across boards
      dtb_bin="${flash_dir}/dtb.bin"
      rm -f "${dtb_bin}"
      # dtb.bin is only used in UFS based boards at the moment and UFS uses a
      # 4k sector size, so pass -S 4096
      # in qcom-ptool/platforms/*/partitions.conf, dtb_a and _b partitions
      # are provisioned with 64MiB; create a 4MiB FAT that will comfortably fit
      # in these and hold the target device tree, which is 4096 KiB sized
      # blocks for mkfs.vfat's last argument
      mkfs.vfat -S 4096 -C "${dtb_bin}" 4096
      # RB3 Gen2 Vision Kit will probably have a more specific DTB (see
      # <20241204100003.300123-6-quic_vikramsa@quicinc.com> on lore.kernel.org)
      # but for now use the core kit one
      dtb="qcom/qcs6490-rb3gen2.dtb"
      # extract board device tree from the root filesystem provided tarball
      tar -C build -xvf "${ARTIFACTDIR}/dtbs.tar.gz" "${dtb}"
      # copy into the FAT as combined-dtb.dtb
      mcopy -vmp -i "${dtb_bin}" "build/${dtb}" ::/combined-dtb.dtb

      # (NB: flashing files already expect "dtb.bin" as a filename)

      # update flashing files for ESP image;
      # qcom-ptool/platforms/*/partitions.conf uses filename=efi.bin for the
      # ESP partition on EFI capable platforms
      sed -i '/label="efi"/s#filename="[^"]*"#filename="../disk-ufs.img1"#' \
          "${flash_dir}"/rawprogram*.xml

      # update flashing files for rootfs image;
      # qcom-ptool/platforms/*/partitions.conf uses filename=rootfs.img for the
      # rootfs partition
      sed -i \
          '/label="rootfs"/s#filename="[^"]*"#filename="../disk-ufs.img2"#' \
          "${flash_dir}"/rawprogram*.xml

      # cleanup
      rm -rf build

# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause
