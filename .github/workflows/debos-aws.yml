name: Build debos recipe in AWS

on:
  # allow manual runs
  workflow_dispatch:
  # run on pull requests to the main branch
  pull_request:
    branches: [main]
  # run on pushes to the main branch
  push:
    branches: [main]
  # run daily at 8:30am
  schedule:
    - cron: '30 8 * * *'
  
# only need permission to read repository; implicitely set all other
# permissions to none
permissions:
  contents: read

defaults:
  # run all commands from the debos-recipes directory
  run:
    working-directory: debos-recipes

# cancel in progress builds for this workflow triggered by the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-debos:
    runs-on:
      - codebuild-QualcommLinux-Qcom-Deb_DefaultVPC-${{ github.run_id }}-${{ github.run_attempt }}
      - buildspec-override:true #This tells our self-hosted runner to upload artifacts
    container:
      image: public.ecr.aws/docker/library/debian:trixie
      #volumes:
      #  - /efs/qli/metaqcom/gh-runners/quic-yocto/builds:/fileserver-builds
      options: --privileged
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # make sure we have latest packages first, to get latest fixes and to
      # avoid an automated update while we're building
      - name: Update OS packages
        run: |
          set -x
          apt update
          apt -y upgrade
          apt -y full-upgrade
          apt -y install debos

      - name: Build debos recipe
        run: |
          set -x
          # start by building the root filesystem
          debos qualcomm-linux-debian-rootfs.yaml
          # debos tries KVM and UML as backends, and falls back to
          # building directly on the host, but that requires loop
          # devices; use qemu backend explicitly even if it's slower
          # qemu backend also requires to set scratchsize, otherwise the
          # whole build is done from memory and the out of memory killer
          # gets triggered
          debos -b qemu --scratchsize 4GiB -t imagetype:ufs \
              qualcomm-linux-debian-image.yaml
          debos -b qemu --scratchsize 4GiB -t imagetype:sdcard \
              qualcomm-linux-debian-image.yaml

      - name: Stage image for publishing
        run: |
          set -x
          # curl will be used to talk to fileserver; should be installed by
          # default
          apt -y install curl
          # github runs are only unique per repository and may also be re-run;
          # create an unique id with repository, run id, and run attempt
          id="${GITHUB_REPOSITORY}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          # create a directory for the current run
          dir="/fileserver-builds/${id}"
          mkdir -vp "${dir}"
          # Files placed under ${dir} will be published internally
          cp -v disk-ufs.img.gz "${dir}"
          cp -v disk-sdcard.img.gz "${dir}"

